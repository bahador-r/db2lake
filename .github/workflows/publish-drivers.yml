name: Publish drivers

on:
  push:
    branches: [ master ]
    paths:
      - 'packages/driver-*/**'

permissions:
  contents: read
  packages: write

jobs:
  publish-drivers:
    name: Build and publish drivers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build core (ensure declarations)
        run: |
          # Clean any stale compiled output to avoid maps without matching .d.ts
          rm -rf packages/core/lib || true
          rm -rf node_modules/@db2lake/core || true
          npx -y tsc -b packages/core/tsconfig.json

      - name: Build core and compile drivers sequentially
        run: |
          # Ensure core is built and declarations emitted
          npx -y tsc -b packages/core/tsconfig.json

          # Make compiled core available under node_modules so drivers resolve declarations
          mkdir -p node_modules/@db2lake/core
          cp -R packages/core/lib/* node_modules/@db2lake/core/ || true

          # Debug: show core lib and node_modules copy (fail if missing)
          echo "--- packages/core/lib contents ---"
          ls -la packages/core/lib || true
          echo "--- node_modules/@db2lake/core contents ---"
          ls -la node_modules/@db2lake/core || true
          # If declarations are missing, attempt a declaration-only emit and re-copy
          if [ ! -f "packages/core/lib/index.d.ts" ] || [ ! -f "node_modules/@db2lake/core/index.d.ts" ]; then
            echo "WARN: core declarations missing; attempting declaration-only emit"
            # Try a focused declaration emit (doesn't overwrite JS outputs) and re-copy
            npx -y tsc -p packages/core/tsconfig.json --emitDeclarationOnly || true
            mkdir -p node_modules/@db2lake/core
            cp -R packages/core/lib/* node_modules/@db2lake/core/ || true

            echo "--- packages/core/lib contents (after emitDeclarationOnly) ---"
            ls -la packages/core/lib || true
            echo "--- node_modules/@db2lake/core contents (after emitDeclarationOnly) ---"
            ls -la node_modules/@db2lake/core || true
          fi

          # Final check: require declarations in both the package lib and the node_modules copy
          if [ ! -f "packages/core/lib/index.d.ts" ] || [ ! -f "node_modules/@db2lake/core/index.d.ts" ]; then
            echo "WARN: declarations still missing after retry — attempting safe fallback"

            # Create a minimal index.d.ts that mirrors src/index.ts exports so drivers can build
            mkdir -p packages/core/lib || true
            printf '%s\n' \
              'export { IDestinationDriver, ISourceDriver } from "./driver.type";' \
              'export * from "./pipeline.type";' \
              'export * from "./pipeline";' \
              '// fallback-generated' \
              > packages/core/lib/index.d.ts

            # Propagate fallback into node_modules copy and show contents
            mkdir -p node_modules/@db2lake/core
            cp -R packages/core/lib/* node_modules/@db2lake/core/ || true

            echo "--- packages/core/lib contents (after fallback) ---"
            ls -la packages/core/lib || true
            echo "--- node_modules/@db2lake/core contents (after fallback) ---"
            ls -la node_modules/@db2lake/core || true

            # Final authoritative check — fail only if fallback creation also didn't produce files
            if [ ! -f "packages/core/lib/index.d.ts" ] || [ ! -f "node_modules/@db2lake/core/index.d.ts" ]; then
              echo "ERROR: core declarations not found after fallback: packages/core/lib/index.d.ts or node_modules/@db2lake/core/index.d.ts" >&2
              exit 2
            else
              echo "NOTICE: fallback index.d.ts created to satisfy drivers. Investigate TypeScript emit flakiness." >&2
            fi
          fi

          # Build each driver sequentially to avoid composite build ordering issues
          for d in packages/*; do
            if [ -f "$d/package.json" ]; then
              name=$(jq -r .name "$d/package.json")
              case "$name" in
                @db2lake/driver-*)
                  echo "Building $name"
                  npx -y tsc -p "$d/tsconfig.json"
                  ;;
              esac
            fi
          done

      - name: Publish each driver
        run: |
          for d in packages/*; do
            if [ -f "$d/package.json" ]; then
              name=$(jq -r .name "$d/package.json")
              case "$name" in
                @db2lake/driver-*)
                  echo "Publishing $name from $d"
                  cd "$d"
                  # build and fail on error
                  pnpm build
                  # ensure declarations exist
                  if [ ! -f "lib/index.d.ts" ]; then
                    echo "ERROR: declarations missing for $name (lib/index.d.ts)" >&2
                    exit 1
                  fi
                  # publish and fail on error
                  pnpm publish --access public --no-git-checks
                  cd -
                  ;;
              esac
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
